services:
  fastapi:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./backend/.env.example
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_POOL_MAX_CONNECTIONS: 200
      SEARXNG_URL: http://searxng:8080/search
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      migrate:
        condition: service_completed_successfully
      searxng:
        condition: service_started
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import sys,urllib.request;sys.exit(0 if urllib.request.urlopen('http://localhost:8000/api/health', timeout=5).status==200 else 1)\""]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    volumes:
      - ./backend:/srv/backend:delegated

  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./backend/.env.example
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_POOL_MAX_CONNECTIONS: 200
      SEARXNG_URL: http://searxng:8080/search
    command: ["uv", "run", "celery", "-A", "app.worker", "worker", "--loglevel=info"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      migrate:
        condition: service_completed_successfully
    volumes:
      - ./backend:/srv/backend:delegated

  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: ["uv", "run", "celery", "-A", "app.worker", "beat", "-l", "info"]
    env_file:
      - ./backend/.env.example
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_POOL_MAX_CONNECTIONS: 200
      SEARXNG_URL: http://searxng:8080/search
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      migrate:
        condition: service_completed_successfully
    volumes:
      - ./backend:/srv/backend:delegated

  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: costcourter
      POSTGRES_USER: costcourter
      POSTGRES_PASSWORD: change-me
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U costcourter"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redisdata:/data
    ports:
      - "6379:6379"

  searxng:
    image: searxng/searxng:latest
    restart: unless-stopped
    environment:
      SEARXNG_SECRET_KEY: ${SEARXNG_SECRET_KEY:-change-me}
      SEARXNG_SETTINGS__SERVER__PUBLIC_INSTANCE: "false"
      SEARXNG_SETTINGS__SERVER__LIMITER: "false"
      SEARXNG_SETTINGS__BOTDETECTION__ENABLED: "false"
      SEARXNG_SETTINGS__SERVER__API_ENABLED: "true"
      SEARXNG_SETTINGS__SERVER__REAL_IP_HEADER: HTTP_X_FORWARDED_FOR
      SEARXNG_SETTINGS__SERVER__TRUSTED_PROXIES: '["127.0.0.1","::1","172.18.0.0/16"]'
      SEARXNG_SETTINGS__SEARCH__SAFE_SEARCH: "0"
    expose:
      - "8080"
    healthcheck:
      test: [
        "CMD-SHELL",
        "python - <<'PY'\nimport sys, urllib.request\ntry:\n    with urllib.request.urlopen('http://127.0.0.1:8080/healthz', timeout=5) as resp:\n        sys.exit(0 if 200 <= resp.getcode() < 500 else 1)\nexcept Exception:\n    sys.exit(1)\nPY"
      ]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - ./config/searxng/settings.yml:/etc/searxng/settings.yml

  migrate:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./backend/.env.example
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
    command: ["uv", "run", "alembic", "upgrade", "head"]
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/srv/backend:delegated
    restart: "no"

  etl:
    build:
      context: ./backend
      dockerfile: Dockerfile
    working_dir: /srv/backend
    env_file:
      - ./backend/.env.example
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
    command:
      - sh
      - -lc
      - >-
        uv run python scripts/migrations/load_reference_data.py --postgres-dsn postgresql+psycopg://costcourter:change-me@postgres:5432/costcourter &&
        uv run python scripts/migrations/load_catalog.py --mysql-dsn mysql+pymysql://root:root@mysql:3306/costcourter --postgres-dsn postgresql+psycopg://costcourter:change-me@postgres:5432/costcourter &&
        uv run python scripts/migrations/load_users.py --mysql-dsn mysql+pymysql://root:root@mysql:3306/costcourter --postgres-dsn postgresql+psycopg://costcourter:change-me@postgres:5432/costcourter &&
        uv run python scripts/migrations/load_notifications.py --mysql-dsn mysql+pymysql://root:root@mysql:3306/costcourter --postgres-dsn postgresql+psycopg://costcourter:change-me@postgres:5432/costcourter &&
        uv run python scripts/migrations/validate_counts.py --mysql-dsn mysql+pymysql://root:root@mysql:3306/costcourter --postgres-dsn postgresql+psycopg://costcourter:change-me@postgres:5432/costcourter &&
        uv run python scripts/migrations/validate_fks.py --postgres-dsn postgresql+psycopg://costcourter:change-me@postgres:5432/costcourter
    depends_on:
      postgres:
        condition: service_healthy
      mysql:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    volumes:
      - ./backend:/srv/backend:delegated
    restart: "no"

  # Optional MySQL source for ETL rehearsals
  mysql:
    image: mysql:8.2
    environment:
      MYSQL_DATABASE: costcourter
      MYSQL_USER: costcourter
      MYSQL_PASSWORD: costcourter
      MYSQL_ROOT_PASSWORD: root
    ports:
      - "3307:3306"
    volumes:
      - mysql:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
  scraper:
    build:
      context: ./scraper
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    healthcheck:
      test: [
        "CMD-SHELL",
        "python - <<'PY'\nimport sys, urllib.request\ntry:\n    r = urllib.request.urlopen('http://localhost:3000/health', timeout=5)\n    sys.exit(0 if 200 <= r.getcode() < 500 else 1)\nexcept Exception:\n    sys.exit(1)\nPY"
      ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  frontend:
    image: node:20-alpine
    working_dir: /srv/frontend
    environment:
      VITE_API_BASE_URL: http://fastapi:8000/api
      VITE_APP_NAME: CostCourter
    volumes:
      - ./frontend:/srv/frontend:delegated
    command: ["sh", "-lc", "npm ci && npm run build && npm run preview -- --host 0.0.0.0"]
    ports:
      - "4173:4173"
    depends_on:
      fastapi:
        condition: service_healthy

volumes:
  pgdata:
  redisdata:
  mysql:
